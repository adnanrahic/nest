<!--<script>
    function embedYouTubeVideo() {
        player = new YT.Player('video', {
            videoId: '3fJ-TdyZtKE',
            playerVars: {'autoplay': 1}
        });
    }

    function rewind() {
        var currentTime = player.getCurrentTime();
        player.seekTo(currentTime - 30, true);
        player.playVideo();
    }

    function fastforward() {
        var currentTime = player.getCurrentTime();
        player.seekTo(currentTime + 30, true);
        player.playVideo();  

    }
</script>-->



<div class="card_margin_bottom">
    <div class="quick_card card">
        <div class="quick_card_name">
            <%= video.title %>
        </div><hr>
        <div class="row">
            <div class="col s12 l9">
                <div id="player"></div>
                <input type="hidden" id="videoid" name="videoid" value="<%= video.URL %>">
            </div>
            <div class="col s12 l3">
                <div class="row">
                    <div class="col s6">
                        <button class="btn-floating btn-large waves-effect waves-light red" name="action" onclick="rewind()">-10s</button>
                    </div>
                    <div class="col s6">
                        <button class="btn-floating btn-large waves-effect waves-light green" name="action" onclick="fastforward()">+10s</button>
                    </div>
                </div>
                <p class="center">Description</p>
                <p><%= video.description %></p>
            </div>
        </div>
    </div>
</div>



<script>
    var videoid = document.getElementById('videoid').value;
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '340',
            width: '100%',
            videoId: videoid,
            events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
    
    
    //rwd/ff
    function rewind() {
        var currentTime = player.getCurrentTime();
        player.seekTo(currentTime - 10, true);
        player.playVideo();
    }

    function fastforward() {
        var currentTime = player.getCurrentTime();
        player.seekTo(currentTime + 10, true);
        player.playVideo();  

    }
    
    $(function(){
    
        // embed the video
        embedYouTubeVideo();
    
        // bind events to the arrow keys
        $(document).keydown(function(e) {
            switch(e.which) {
                    
                case 37: // left (rewind)
                    rewind();
                break;
                    
                case 39: // right
                    fastforward();
                break;
        
                default: return; // exit this handler for other keys
            }
            e.preventDefault(); // prevent the default action (scroll / move caret)
        });
    });
</script>